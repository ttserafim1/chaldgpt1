import logging
import subprocess
import os
from collections import deque
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from openai import OpenAI

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
required_packages = ["openai", "python-telegram-bot"]
for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        subprocess.run(["pip", "install", package])

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
TELEGRAM_TOKEN = "7978192939:AAGnHNXWhTudLmCfj7Uvz28tbAuAnYClXEs"
BOT_USERNAME = "@YourBotUsername"
OPENROUTER_API_KEY = "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"
MODEL_NAME="google/gemini-2.0-flash-lite-001"
BOT_NAME = "ChaldGPT V5 (beta)"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE = "bot.log"
logging.basicConfig(filename=LOG_FILE, format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ 10 –ú–ë
if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > 10 * 1024 * 1024:
    with open(LOG_FILE, "w") as log:
        log.write("")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–º—è—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤
MESSAGE_HISTORY_LIMIT = 1000
DAILY_MESSAGE_LIMIT = 100
user_message_counts = {}
message_history = deque(maxlen=MESSAGE_HISTORY_LIMIT)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id):
    today = datetime.now().date()
    if user_id not in user_message_counts or user_message_counts[user_id]["date"] != today:
        user_message_counts[user_id] = {"date": today, "count": 0}
    
    if user_message_counts[user_id]["count"] >= DAILY_MESSAGE_LIMIT:
        return False
    
    user_message_counts[user_id]["count"] += 1
    return True

async def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} ‚Äì —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫.")
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def status(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    remaining = max(0, DAILY_MESSAGE_LIMIT - user_message_counts.get(user_id, {"count": 0})["count"])
    await update.message.reply_text(f"üìä –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

async def reset(update: Update, context: CallbackContext):
    global message_history
    message_history.clear()
    await update.message.reply_text("üóë –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")

async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_message = update.message.text

    if not check_message_limit(user_id):
        await update.message.reply_text("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    message_history.append(user_message)
    
    try:
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": f"–¢—ã {BOT_NAME}. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
                {"role": "user", "content": user_message}
            ]
        ).choices[0].message.content
        
        await update.message.reply_text(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

async def poweroff(update: Update, context: CallbackContext):
    global running
    running = False
    await update.message.reply_text("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

async def poweron(update: Update, context: CallbackContext):
    global running
    running = True
    await update.message.reply_text("üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("poweroff", poweroff))
    application.add_handler(CommandHandler("poweron", poweron))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
